// Used to generate utilities & print utilities
@mixin generate-utility($utility, $infix, $is-rfs-media-query: false) {
  $prefix-class: if($infix != '' and $infix != '-print', str-slice($infix, 2) + '\\:', '');
  $utility-src: $utility;
  $utility: map-remove($utility, darkmode);
  @if $enable-prefix-only {
    @include generate-utility-with-prefix($utility, '', $prefix-class, $is-rfs-media-query);
  } @else {
    @include generate-utility-with-prefix($utility, $infix, '', $is-rfs-media-query);
    @if $prefix-class != '' {
      @include generate-utility-with-prefix($utility, '', $prefix-class, $is-rfs-media-query);
    }
  }
  @if map-get($utility-src, darkmode) {
    $utility: $utility-src;
    @if $enable-prefix-only {
      @include generate-utility-with-prefix($utility, '', $prefix-class, $is-rfs-media-query);
    } @else {
      @include generate-utility-with-prefix($utility, $infix, '', $is-rfs-media-query);
      @if $prefix-class != '' {
        @include generate-utility-with-prefix($utility, '', $prefix-class, $is-rfs-media-query);
      }
    }
  }
}

@mixin generate-utility-with-prefix($utility, $infix, $prefix-class: '', $is-rfs-media-query: false) {
  $values: map-get($utility, values);

  // If the values are a list or string, convert it into a map
  @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
    $values: zip($values, $values);
  }

  @each $key, $value in $values {
    $properties: map-get($utility, property);

    // Multiple properties are possible, for example with vertical or horizontal margins or paddings
    @if type-of($properties) == "string" {
      $properties: append((), $properties);
    }

    // Use custom class if present
    $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
    $property-class: if($property-class == null, "", $property-class);

    // Use custom CSS variable name if present, otherwise default to `class`
    $css-variable-name: if(map-has-key($utility, css-variable-name), map-get($utility, css-variable-name), map-get($utility, class));

    // State params to generate pseudo-classes
    $state: if(map-has-key($utility, state), map-get($utility, state), ());

    $infix: if($property-class == "" and str-slice($infix, 1, 1) == "-", str-slice($infix, 2), $infix);

    // Don't prefix if value key is null (e.g. with shadow class)
    $property-class-modifier: if($key, if($property-class == "" and $infix == "", "", "-") + $key, "");

    @if map-get($utility, rfs) {
      // Inside the media query
      @if $is-rfs-media-query {
        $val: rfs-value($value);

        // Do not render anything if fluid and non fluid values are the same
        $value: if($val == rfs-fluid-value($value), null, $val);
      }
      @else {
        $value: rfs-fluid-value($value);
      }
    }

    $is-css-var: map-get($utility, css-var);
    $is-local-vars: map-get($utility, local-vars);
    $is-rtl: map-get($utility, rtl);

    @if $value != null {
      @if $is-rtl == false {
        /* rtl:begin:remove */
      }

      $selectors: ();
      $selector: '#{$prefix-class + $property-class + $infix + $property-class-modifier}';
      $selectors: append($selectors, $selector);
      @each $pseudo in $state {
        $pseudo-prefix: $pseudo + '\\:';
        @if not($enable-prefix-only) {
          $selector: '#{$prefix-class + $property-class + $infix + $property-class-modifier}-#{$pseudo}:#{$pseudo}';
          $selectors: append($selectors, $selector);
        }
        $selector: '#{$prefix-class + $pseudo-prefix + $property-class + $infix + $property-class-modifier}:#{$pseudo}';
        $selectors: append($selectors, $selector);
      }
      @if map-get($utility, darkmode) {
        $src-selectors: $selectors;
        $selectors: ();
        @each $selector in $src-selectors {
          $dark-selector: ':where(.uc-dark) .dark\\:' + $selector;
          $selectors: append($selectors, $dark-selector);
        }
      }
      $src-selectors: $selectors;
      $selectors: ();
      @each $selector in $src-selectors {
        @if str-slice($selector, 0, 1) == ':' {
          $selectors: append($selectors, $selector, comma);
        } @else {
          $selectors: append($selectors, '.#{$selector}', comma);
        }
      }
      @if $is-css-var {
        #{$selectors} {
          --#{$prefix}#{$css-variable-name}: #{$value};
        }
      } @else {
        #{$selectors} {
          @each $property in $properties {
            @if $is-local-vars {
              @each $local-var, $variable in $is-local-vars {
                --#{$prefix}#{$local-var}: #{$variable};
              }
            }
            #{$property}: $value if($enable-important-utilities, !important, null);
          }
        }
        @if $is-rtl {
          // Add LTR prefixed selector
          [dir=ltr] .ltr\:#{$prefix-class + $property-class + $infix + $property-class-modifier} {
            @each $property in $properties {
              #{$property}: $value !important;
            }
          }
          // Add RTL prefixed selector
          [dir=rtl] .rtl\:#{$prefix-class + $property-class + $infix + $property-class-modifier} {
            @each $property in $properties {
              #{$property}: $value !important;
            }
          }
        }
      }

      @if $is-rtl == false {
        /* rtl:end:remove */
      }
    }
  }
}