// ==================================================
// Common Mixin
// ==================================================

@use "sass:map";
@use "sass:list";
@use 'sass:math';

// Font Properties
@mixin font-props($name) {
    font-size: var(--sizes-#{$name}-size) !important;
    line-height: var(--sizes-#{$name}-lh) !important;
    letter-spacing: var(--sizes-#{$name}-lp) !important;
}

// Media Queries
@mixin wrap-media {
    @content('');
    @each $bp, $width in map.get($config, 'breakpoints') {
        html.bp-#{$bp} #{if(&, &, '')} {
            @content('-' + $bp);
        }
    }
}
@mixin xs {
    html.bp-xs {
        @content;
    }
}
@mixin sm {
    html.bp-sm {
        @content;
    }
}
@mixin md {
    html.bp-md {
        @content;
    }
}
@mixin lg {
    html.bp-lg {
        @content;
    }
}
@mixin xl {
    html.bp-xl {
        @content;
    }
}
@mixin xxl {
    html.bp-xxl {
        @content;
    }
}

// Responsive bp
@mixin make-responsive($selector: '&', $type: 'min') {
    $breakpoints: map.get($config, 'breakpoints');
    $selectors: ( $selector );
    $selector_class: $selector;
    @if str-slice($selector_class, 0, 1) == '.' {
        $selector_class: str-slice($selector_class, 2);
    } @else {
        $selector_class: '';
    }
    @each $bp, $bp-value in $breakpoints {
        $bp-main-selector: 'html.bp-' + $bp + if($type == 'max', '-max', '') + ' ' + if(&, &, '');
        $bp-selector: $bp-main-selector + $selector + '-' + $bp;
        $selectors: append($selectors, $bp-selector, comma);
        @if $selector_class != '' {
            $bp-selector: $bp-main-selector + ' .' + $bp + '\\:' + $selector_class;
            $selectors: append($selectors, $bp-selector, comma);
        }
    }
    #{$selectors} {
        @content;
    }
}

// Dark mode based on data-bs-theme="dark"
@mixin dark($selector: '&', $pseudo: '') {
    @if index(('::before', ':before', '::after', ':after'), $selector) and $pseudo == '' {
        $pseudo: $selector;
        $selector: '&';
    }
    #{$selector}:where([data-bs-theme="dark"] &)#{$pseudo}, :where([data-bs-theme="dark"]) #{$selector}#{$pseudo} {
        @content;
    }
}

@mixin dark-prop($prop, $value, $dark-value, $selector: '&', $pseudo: '', $selector-parent: '') {
    @if index(('::before', ':before', '::after', ':after'), $selector) and $pseudo == '' {
        $pseudo: $selector;
        $selector: '&';
    }
    @if $selector-parent != '' {
        #{$selector-parent} #{$selector}#{$pseudo} {
            #{$prop}: $value;
        }
        #{$selector-parent} #{$selector}:where([data-bs-theme="dark"] &)#{$pseudo}, 
        #{$selector-parent}:where([data-bs-theme="dark"]) #{$selector}#{$pseudo}, 
        #{$selector-parent} :where([data-bs-theme="dark"]) #{$selector}#{$pseudo} {
            #{$prop}: $dark-value;
        }
    } @else {
        #{$selector}#{$pseudo} {
            #{$prop}: $value;
        }
        #{$selector}:where([data-bs-theme="dark"] &)#{$pseudo}, 
        :where([data-bs-theme="dark"]) #{$selector}#{$pseudo} {
            #{$prop}: $dark-value;
        }
    }
}

@mixin dark-props($props, $selector: '&', $pseudo: '') {
    @if index(('::before', ':before', '::after', ':after'), $selector) and $pseudo == '' {
        $pseudo: $selector;
        $selector: '&';
    }
    #{$selector}#{$pseudo} {
        @content;
        @each $prop, $value in $props {
            #{$prop}: list.nth($value, 1) !important;
        }
    }
    #{$selector}:where([data-bs-theme="dark"] &)#{$pseudo}, 
    :where([data-bs-theme="dark"]) #{$selector}#{$pseudo} {
        @each $prop, $value in $props {
            #{$prop}: list.nth($value, 2) !important;
        }
    }
}

// Generate color palette based on origin
@mixin create-color($name, $is-dark: false) {
    @each $type in ('text', 'background', 'border') {
        @each $level in $colors-levels {
            $name-suffix: '-' + $level;
            @if ($name != 'gray' and $name != 'light') {
                $name-suffix: '';
            }
            $full-name: $name + $name-suffix;
            $value: var(--color-#{$full-name});
            $selector-prefix: if($is-dark, ':where([data-bs-theme="dark"]) .dark\\:', '.');
            $selector-suffix: 'uc-' + $type + '-' + $full-name;
            $selectors: ( $selector-prefix + $selector-suffix );
            @if $is-dark {
                $selector-prefix: ':where([data-bs-theme="dark"]).dark\\:';
                $selector: $selector-prefix + $selector-suffix;
                $selectors: append($selectors, $selector, comma);
            }
            #{$selectors} {
                #{if($type == 'text', '', $type + '-') + 'color'}: $value !important;
            }
        }
    }
    @each $type in ('text', 'background', 'border') {
        @each $level in $colors-levels {
            $name-suffix: '-' + $level;
            @if ($name != 'gray' and $name != 'light') {
                $name-suffix: '';
            }
            $full-name: $name + $name-suffix;
            $value: var(--color-#{$full-name});
            $selector-prefix: if($is-dark, ':where([data-bs-theme="dark"]) .dark\\:hover\\:', '.hover\\:');
            $selector-suffix: 'uc-' + $type + '-' + $full-name + ':hover';
            $selectors: ( $selector-prefix + $selector-suffix );
            @if $is-dark {
                $selector-prefix: ':where([data-bs-theme="dark"]).dark\\:hover\\:';
                $selector: $selector-prefix + $selector-suffix;
                $selectors: append($selectors, $selector, comma);
            }
            #{$selectors} {
                #{if($type == 'text', '', $type + '-') + 'color'}: $value !important;
                transition: .1s ease-in-out;
                transition-property: color, background-color, border-color;
            }
        }
    }
}

// Generate rgba palette based on origin
@mixin generate-rgba {
    @each $color in ('white', 'black') {
        @each $rule in ('text', 'background', 'border') {
            .uc-#{$rule}-#{$color},
            :where([data-bs-theme="dark"]).dark\:uc-#{$rule}-#{$color},
            :where([data-bs-theme="dark"]) .dark\:uc-#{$rule}-#{$color} {
                @for $step from 1 through 20 {
                    &#{if(5 * $step != 100, '-' + 5 * $step, '')} {
                        #{if($rule == 'text', 'color', $rule + '-color')}: #{if($color == 'white', rgba(255, 255, 255, math.div($step, 20)), rgba(0, 0, 0, math.div($step, 20)))} !important;
                    }
                }
            }
        }
    }
}

// Gradient
@mixin gradient {
    background-color: var(--gradient-first);
    background-image: linear-gradient(var(--gradient-angle), var(--gradient-first), var(--gradient-second));
}

// ==================================================
// Component & Base Mixin
// ==================================================

// Text
@mixin text-size-modifier($bp: '') {
    @each $name, $size in map.get($config, 'sizes', 'text') {
        &#{if($name != '', '-' + $name, '')}#{$bp} {
            @include font-props('text' + if($name != '', '-' + $name, ''));
        }
    }

    &-lead#{$bp} {
        @include font-props('text-xlarge');
        color: var(--body-color-text);
    }
    &-meta#{$bp} {
        @include font-props('text-xsmall');
    }
    &-overline#{$bp} {
        @include font-props('text-xsmall');
        font-weight: 500 !important;
        text-transform: uppercase !important;
        letter-spacing: 1px !important;
    }
}
@mixin text-weight-modifier($bp: '') {
    @each $name, $size in map.get($config, 'font', 'weight') {
        &#{if($name != '', '-' + $name, '')}#{$bp} {
            font-weight: var(--font-weight-#{$name}) !important;
        }
    }
}

// Icon
@mixin icon {

    @include wrap-media() using ($bp) {
        // Size Modifier
        @each $name, $size in map.get($config, 'sizes', 'icon') {
            $dash-name: if($name != '', '-' + $name, '');
            .icon#{$dash-name}#{$bp} {
                font-size: var(--sizes-icon#{$dash-name});
                width: var(--sizes-icon#{$dash-name});
                height: var(--sizes-icon#{$dash-name});
                line-height: 1;
            }
        }
    }

}

// Handle RTL classes
@mixin rtl-utility-selector($selectors, $properties, $value) {
    [dir=rtl] #{$selectors} {
        @each $property in $properties {
            @if str-index($property, 'left') {
                $rtl-property: str-replace($property, 'left', 'right');
                #{$rtl-property}: #{$value} !important;
            } @else if str-index($property, 'right') {
                $rtl-property: str-replace($property, 'right', 'left');
                #{$rtl-property}: #{$value} !important;
            } @else {
                #{$property}: #{$value} !important;
            }
        }
    }
}
@mixin rtl-prop($properties, $value, $default_value: 1rem, $selector: '&', $pseudo: '', $selector-parent: '') {
    @if index(('::before', ':before', '::after', ':after'), $selector) and $pseudo == '' {
        $pseudo: $selector;
        $selector: '&';
    }
    
    @if $selector-parent != '' {
        #{$selector-parent} #{$selector}#{$pseudo} {
            @each $property in $properties {
                #{$property}: #{$value} !important;
            }
        }
        [dir=rtl] #{$selector-parent} #{$selector}#{$pseudo}{
            @each $property in $properties {
                @include swap-direction($property, $value, $default_value);
            }
        }
    } @else {
        #{$selector}#{$pseudo} {
            @each $property in $properties {
                #{$property}: #{$value} !important;
            }
        }
        [dir=rtl] #{$selector}#{$pseudo} {
            @each $property in $properties {
                @include swap-direction($property, $value, $default_value);
            }
        }
    }
}

@mixin swap-direction($property, $value, $default_value) {
    @if str-index($property, 'left') {
        $rtl-property: str-replace($property, 'left', 'right');
        #{$property}: #{$default_value} !important;
        #{$rtl-property}: #{$value} !important;
    } @else if str-index($property, 'right') {
        $rtl-property: str-replace($property, 'right', 'left');
        #{$property}: #{$default_value} !important;
        #{$rtl-property}: #{$value} !important;
    } @else if str-index($property, 'ltr') {
        $rtl-property: str-replace($property, 'ltr', 'rtl');
        #{$property}: #{$default_value} !important;
        #{$rtl-property}: #{$value} !important;
    } @else if str-index($property, 'rtl') {
        $rtl-property: str-replace($property, 'rtl', 'ltr');
        #{$property}: #{$default_value} !important;
        #{$rtl-property}: #{$value} !important;
    } @else {
        #{$property}: #{$default_value} !important;
    }
}
